'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet2
    Inherits DataSet
    
    Private tableAvisosFactura As AvisosFacturaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AvisosFactura")) Is Nothing) Then
                Me.Tables.Add(New AvisosFacturaDataTable(ds.Tables("AvisosFactura")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AvisosFactura As AvisosFacturaDataTable
        Get
            Return Me.tableAvisosFactura
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet2 = CType(MyBase.Clone,DataSet2)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("AvisosFactura")) Is Nothing) Then
            Me.Tables.Add(New AvisosFacturaDataTable(ds.Tables("AvisosFactura")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAvisosFactura = CType(Me.Tables("AvisosFactura"),AvisosFacturaDataTable)
        If (Not (Me.tableAvisosFactura) Is Nothing) Then
            Me.tableAvisosFactura.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet2"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet2.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-MX")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAvisosFactura = New AvisosFacturaDataTable
        Me.Tables.Add(Me.tableAvisosFactura)
    End Sub
    
    Private Function ShouldSerializeAvisosFactura() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AvisosFacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As AvisosFacturaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AvisosFacturaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodNota As DataColumn
        
        Private columnModulo As DataColumn
        
        Private columnNota As DataColumn
        
        Private columnDisponible As DataColumn
        
        Private columnUsuario As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnStatusRegistro As DataColumn
        
        Friend Sub New()
            MyBase.New("AvisosFactura")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodNotaColumn As DataColumn
            Get
                Return Me.columnCodNota
            End Get
        End Property
        
        Friend ReadOnly Property ModuloColumn As DataColumn
            Get
                Return Me.columnModulo
            End Get
        End Property
        
        Friend ReadOnly Property NotaColumn As DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        Friend ReadOnly Property DisponibleColumn As DataColumn
            Get
                Return Me.columnDisponible
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property StatusRegistroColumn As DataColumn
            Get
                Return Me.columnStatusRegistro
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AvisosFacturaRow
            Get
                Return CType(Me.Rows(index),AvisosFacturaRow)
            End Get
        End Property
        
        Public Event AvisosFacturaRowChanged As AvisosFacturaRowChangeEventHandler
        
        Public Event AvisosFacturaRowChanging As AvisosFacturaRowChangeEventHandler
        
        Public Event AvisosFacturaRowDeleted As AvisosFacturaRowChangeEventHandler
        
        Public Event AvisosFacturaRowDeleting As AvisosFacturaRowChangeEventHandler
        
        Public Overloads Sub AddAvisosFacturaRow(ByVal row As AvisosFacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAvisosFacturaRow(ByVal CodNota As Integer, ByVal Modulo As String, ByVal Nota As String, ByVal Disponible As Boolean, ByVal Usuario As String, ByVal Fecha As Date, ByVal StatusRegistro As Boolean) As AvisosFacturaRow
            Dim rowAvisosFacturaRow As AvisosFacturaRow = CType(Me.NewRow,AvisosFacturaRow)
            rowAvisosFacturaRow.ItemArray = New Object() {CodNota, Modulo, Nota, Disponible, Usuario, Fecha, StatusRegistro}
            Me.Rows.Add(rowAvisosFacturaRow)
            Return rowAvisosFacturaRow
        End Function
        
        Public Function FindByCodNota(ByVal CodNota As Integer) As AvisosFacturaRow
            Return CType(Me.Rows.Find(New Object() {CodNota}),AvisosFacturaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AvisosFacturaDataTable = CType(MyBase.Clone,AvisosFacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AvisosFacturaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodNota = Me.Columns("CodNota")
            Me.columnModulo = Me.Columns("Modulo")
            Me.columnNota = Me.Columns("Nota")
            Me.columnDisponible = Me.Columns("Disponible")
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnStatusRegistro = Me.Columns("StatusRegistro")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodNota = New DataColumn("CodNota", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodNota)
            Me.columnModulo = New DataColumn("Modulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModulo)
            Me.columnNota = New DataColumn("Nota", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNota)
            Me.columnDisponible = New DataColumn("Disponible", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisponible)
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnStatusRegistro = New DataColumn("StatusRegistro", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatusRegistro)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodNota}, true))
            Me.columnCodNota.AllowDBNull = false
            Me.columnCodNota.Unique = true
            Me.columnModulo.AllowDBNull = false
            Me.columnNota.AllowDBNull = false
            Me.columnDisponible.AllowDBNull = false
            Me.columnUsuario.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnStatusRegistro.AllowDBNull = false
        End Sub
        
        Public Function NewAvisosFacturaRow() As AvisosFacturaRow
            Return CType(Me.NewRow,AvisosFacturaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AvisosFacturaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AvisosFacturaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AvisosFacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent AvisosFacturaRowChanged(Me, New AvisosFacturaRowChangeEvent(CType(e.Row,AvisosFacturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AvisosFacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent AvisosFacturaRowChanging(Me, New AvisosFacturaRowChangeEvent(CType(e.Row,AvisosFacturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AvisosFacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent AvisosFacturaRowDeleted(Me, New AvisosFacturaRowChangeEvent(CType(e.Row,AvisosFacturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AvisosFacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent AvisosFacturaRowDeleting(Me, New AvisosFacturaRowChangeEvent(CType(e.Row,AvisosFacturaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAvisosFacturaRow(ByVal row As AvisosFacturaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AvisosFacturaRow
        Inherits DataRow
        
        Private tableAvisosFactura As AvisosFacturaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAvisosFactura = CType(Me.Table,AvisosFacturaDataTable)
        End Sub
        
        Public Property CodNota As Integer
            Get
                Return CType(Me(Me.tableAvisosFactura.CodNotaColumn),Integer)
            End Get
            Set
                Me(Me.tableAvisosFactura.CodNotaColumn) = value
            End Set
        End Property
        
        Public Property Modulo As String
            Get
                Return CType(Me(Me.tableAvisosFactura.ModuloColumn),String)
            End Get
            Set
                Me(Me.tableAvisosFactura.ModuloColumn) = value
            End Set
        End Property
        
        Public Property Nota As String
            Get
                Return CType(Me(Me.tableAvisosFactura.NotaColumn),String)
            End Get
            Set
                Me(Me.tableAvisosFactura.NotaColumn) = value
            End Set
        End Property
        
        Public Property Disponible As Boolean
            Get
                Return CType(Me(Me.tableAvisosFactura.DisponibleColumn),Boolean)
            End Get
            Set
                Me(Me.tableAvisosFactura.DisponibleColumn) = value
            End Set
        End Property
        
        Public Property Usuario As String
            Get
                Return CType(Me(Me.tableAvisosFactura.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAvisosFactura.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableAvisosFactura.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableAvisosFactura.FechaColumn) = value
            End Set
        End Property
        
        Public Property StatusRegistro As Boolean
            Get
                Return CType(Me(Me.tableAvisosFactura.StatusRegistroColumn),Boolean)
            End Get
            Set
                Me(Me.tableAvisosFactura.StatusRegistroColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AvisosFacturaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AvisosFacturaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AvisosFacturaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AvisosFacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
